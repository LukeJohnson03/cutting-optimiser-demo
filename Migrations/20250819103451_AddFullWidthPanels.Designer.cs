// <auto-generated />
using CuttingOptimiserDemo;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CuttingOptimiserDemo.Migrations
{
    [DbContext(typeof(GlassCuttingContext))]
    [Migration("20250819103451_AddFullWidthPanels")]
    partial class AddFullWidthPanels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("CuttingOptimiserDemo.CutSegment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("EndX")
                        .HasColumnType("REAL");

                    b.Property<double>("EndY")
                        .HasColumnType("REAL");

                    b.Property<bool>("IsFullLengthX")
                        .HasColumnType("INTEGER");

                    b.Property<double>("StartX")
                        .HasColumnType("REAL");

                    b.Property<double>("StartY")
                        .HasColumnType("REAL");

                    b.Property<int>("StockSheetId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("StockSheetId");

                    b.ToTable("CutSegments");
                });

            modelBuilder.Entity("CuttingOptimiserDemo.Panel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Height")
                        .HasColumnType("REAL");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Width")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Panels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Height = 484.0,
                            Quantity = 8,
                            Width = 700.0
                        },
                        new
                        {
                            Id = 2,
                            Height = 249.0,
                            Quantity = 4,
                            Width = 501.0
                        },
                        new
                        {
                            Id = 3,
                            Height = 675.0,
                            Quantity = 2,
                            Width = 1132.0
                        },
                        new
                        {
                            Id = 4,
                            Height = 433.0,
                            Quantity = 2,
                            Width = 485.0
                        },
                        new
                        {
                            Id = 5,
                            Height = 433.0,
                            Quantity = 1,
                            Width = 485.0
                        },
                        new
                        {
                            Id = 6,
                            Height = 466.0,
                            Quantity = 5,
                            Width = 522.0
                        },
                        new
                        {
                            Id = 7,
                            Height = 1756.0,
                            Quantity = 2,
                            Width = 362.0
                        },
                        new
                        {
                            Id = 8,
                            Height = 926.0,
                            Quantity = 2,
                            Width = 1726.0
                        },
                        new
                        {
                            Id = 10,
                            Height = 400.0,
                            Quantity = 1,
                            Width = 3170.0
                        },
                        new
                        {
                            Id = 11,
                            Height = 350.0,
                            Quantity = 1,
                            Width = 2400.0
                        });
                });

            modelBuilder.Entity("CuttingOptimiserDemo.Placement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("PanelId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("StockSheetId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("X")
                        .HasColumnType("REAL");

                    b.Property<double>("Y")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("PanelId");

                    b.HasIndex("StockSheetId");

                    b.ToTable("Placements");
                });

            modelBuilder.Entity("CuttingOptimiserDemo.StockSheet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Height")
                        .HasColumnType("REAL");

                    b.Property<double>("Width")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("StockSheets");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Height = 1219.0,
                            Width = 1862.0
                        },
                        new
                        {
                            Id = 2,
                            Height = 2440.0,
                            Width = 3210.0
                        },
                        new
                        {
                            Id = 3,
                            Height = 2250.0,
                            Width = 3210.0
                        },
                        new
                        {
                            Id = 4,
                            Height = 1830.0,
                            Width = 2440.0
                        });
                });

            modelBuilder.Entity("CuttingOptimiserDemo.CutSegment", b =>
                {
                    b.HasOne("CuttingOptimiserDemo.StockSheet", "StockSheet")
                        .WithMany("CutSegments")
                        .HasForeignKey("StockSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("StockSheet");
                });

            modelBuilder.Entity("CuttingOptimiserDemo.Placement", b =>
                {
                    b.HasOne("CuttingOptimiserDemo.Panel", "Panel")
                        .WithMany("Placements")
                        .HasForeignKey("PanelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CuttingOptimiserDemo.StockSheet", "StockSheet")
                        .WithMany("Placements")
                        .HasForeignKey("StockSheetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Panel");

                    b.Navigation("StockSheet");
                });

            modelBuilder.Entity("CuttingOptimiserDemo.Panel", b =>
                {
                    b.Navigation("Placements");
                });

            modelBuilder.Entity("CuttingOptimiserDemo.StockSheet", b =>
                {
                    b.Navigation("CutSegments");

                    b.Navigation("Placements");
                });
#pragma warning restore 612, 618
        }
    }
}
